// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: vesta/twin/training_state.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type TrainingState struct {
	Value                     bool      `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	TwinName                  string    `protobuf:"bytes,2,opt,name=twin_name,json=twinName,proto3" json:"twin_name,omitempty"`
	StartTime                 time.Time `protobuf:"bytes,3,opt,name=start_time,json=startTime,proto3,stdtime" json:"start_time"`
	TrainingConfigurationHash string    `protobuf:"bytes,4,opt,name=training_configuration_hash,json=trainingConfigurationHash,proto3" json:"training_configuration_hash,omitempty"`
}

func (m *TrainingState) Reset()         { *m = TrainingState{} }
func (m *TrainingState) String() string { return proto.CompactTextString(m) }
func (*TrainingState) ProtoMessage()    {}
func (*TrainingState) Descriptor() ([]byte, []int) {
	return fileDescriptor_672fc39fef593be7, []int{0}
}
func (m *TrainingState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TrainingState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TrainingState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TrainingState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TrainingState.Merge(m, src)
}
func (m *TrainingState) XXX_Size() int {
	return m.Size()
}
func (m *TrainingState) XXX_DiscardUnknown() {
	xxx_messageInfo_TrainingState.DiscardUnknown(m)
}

var xxx_messageInfo_TrainingState proto.InternalMessageInfo

func (m *TrainingState) GetValue() bool {
	if m != nil {
		return m.Value
	}
	return false
}

func (m *TrainingState) GetTwinName() string {
	if m != nil {
		return m.TwinName
	}
	return ""
}

func (m *TrainingState) GetStartTime() time.Time {
	if m != nil {
		return m.StartTime
	}
	return time.Time{}
}

func (m *TrainingState) GetTrainingConfigurationHash() string {
	if m != nil {
		return m.TrainingConfigurationHash
	}
	return ""
}

func init() {
	proto.RegisterType((*TrainingState)(nil), "vesta.twin.TrainingState")
}

func init() { proto.RegisterFile("vesta/twin/training_state.proto", fileDescriptor_672fc39fef593be7) }

var fileDescriptor_672fc39fef593be7 = []byte{
	// 280 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x90, 0xbf, 0x4e, 0xc3, 0x30,
	0x10, 0x87, 0x63, 0xfe, 0x29, 0x31, 0x62, 0xb1, 0x3a, 0x84, 0x54, 0x72, 0x22, 0xa6, 0x0c, 0x28,
	0x91, 0x60, 0x67, 0x68, 0x17, 0x26, 0x86, 0xd0, 0x89, 0x25, 0x72, 0x91, 0xeb, 0x58, 0x6a, 0xec,
	0x28, 0x76, 0x0a, 0xbc, 0x45, 0xdf, 0x8a, 0x8e, 0x1d, 0x99, 0x00, 0x25, 0x2f, 0x82, 0x6c, 0x37,
	0xa8, 0x9b, 0xef, 0xfc, 0xdd, 0xef, 0xb3, 0x0f, 0xc6, 0x1b, 0xaa, 0x34, 0xc9, 0xf5, 0x1b, 0x17,
	0xb9, 0x6e, 0x09, 0x17, 0x5c, 0xb0, 0x52, 0x69, 0xa2, 0x69, 0xd6, 0xb4, 0x52, 0x4b, 0x04, 0x2d,
	0x90, 0x19, 0x20, 0x9a, 0x30, 0xc9, 0xa4, 0x6d, 0xe7, 0xe6, 0xe4, 0x88, 0x28, 0x66, 0x52, 0xb2,
	0x35, 0xcd, 0x6d, 0xb5, 0xec, 0x56, 0xb9, 0xe6, 0xb5, 0x99, 0xa9, 0x1b, 0x07, 0xdc, 0x7c, 0x02,
	0x78, 0xb5, 0x38, 0x64, 0x3f, 0x9b, 0x68, 0x34, 0x81, 0xe7, 0x1b, 0xb2, 0xee, 0x68, 0x08, 0x12,
	0x90, 0xfa, 0x85, 0x2b, 0xd0, 0x14, 0x06, 0x46, 0x53, 0x0a, 0x52, 0xd3, 0xf0, 0x24, 0x01, 0x69,
	0x50, 0xf8, 0xa6, 0xf1, 0x44, 0x6a, 0x8a, 0xe6, 0x10, 0x2a, 0x4d, 0x5a, 0x5d, 0x9a, 0xf4, 0xf0,
	0x34, 0x01, 0xe9, 0xe5, 0x5d, 0x94, 0x39, 0x75, 0x36, 0xaa, 0xb3, 0xc5, 0xa8, 0x9e, 0xf9, 0xbb,
	0xef, 0xd8, 0xdb, 0xfe, 0xc4, 0xa0, 0x08, 0xec, 0x9c, 0xb9, 0x41, 0x0f, 0x70, 0xfa, 0xff, 0xc9,
	0x57, 0x29, 0x56, 0x9c, 0x75, 0x2d, 0xd1, 0x5c, 0x8a, 0xb2, 0x22, 0xaa, 0x0a, 0xcf, 0xac, 0xf3,
	0x7a, 0x44, 0xe6, 0xc7, 0xc4, 0x23, 0x51, 0xd5, 0xec, 0x76, 0xd7, 0x63, 0xb0, 0xef, 0x31, 0xf8,
	0xed, 0x31, 0xd8, 0x0e, 0xd8, 0xdb, 0x0f, 0xd8, 0xfb, 0x1a, 0xb0, 0xf7, 0x82, 0xdc, 0x1e, 0xdf,
	0x0f, 0x9b, 0xfc, 0x68, 0xa8, 0x5a, 0x5e, 0xd8, 0x67, 0xdd, 0xff, 0x05, 0x00, 0x00, 0xff, 0xff,
	0x22, 0x9a, 0xdc, 0x0a, 0x64, 0x01, 0x00, 0x00,
}

func (m *TrainingState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TrainingState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TrainingState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TrainingConfigurationHash) > 0 {
		i -= len(m.TrainingConfigurationHash)
		copy(dAtA[i:], m.TrainingConfigurationHash)
		i = encodeVarintTrainingState(dAtA, i, uint64(len(m.TrainingConfigurationHash)))
		i--
		dAtA[i] = 0x22
	}
	n1, err1 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.StartTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.StartTime):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintTrainingState(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x1a
	if len(m.TwinName) > 0 {
		i -= len(m.TwinName)
		copy(dAtA[i:], m.TwinName)
		i = encodeVarintTrainingState(dAtA, i, uint64(len(m.TwinName)))
		i--
		dAtA[i] = 0x12
	}
	if m.Value {
		i--
		if m.Value {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintTrainingState(dAtA []byte, offset int, v uint64) int {
	offset -= sovTrainingState(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TrainingState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Value {
		n += 2
	}
	l = len(m.TwinName)
	if l > 0 {
		n += 1 + l + sovTrainingState(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.StartTime)
	n += 1 + l + sovTrainingState(uint64(l))
	l = len(m.TrainingConfigurationHash)
	if l > 0 {
		n += 1 + l + sovTrainingState(uint64(l))
	}
	return n
}

func sovTrainingState(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTrainingState(x uint64) (n int) {
	return sovTrainingState(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TrainingState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTrainingState
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TrainingState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TrainingState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrainingState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Value = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TwinName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrainingState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTrainingState
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTrainingState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TwinName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrainingState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTrainingState
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTrainingState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.StartTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrainingConfigurationHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrainingState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTrainingState
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTrainingState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TrainingConfigurationHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTrainingState(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTrainingState
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTrainingState(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTrainingState
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTrainingState
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTrainingState
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTrainingState
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTrainingState
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTrainingState
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTrainingState        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTrainingState          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTrainingState = fmt.Errorf("proto: unexpected end of group")
)
