// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: vesta/twin/train_data.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type GetTrainDataResponse struct {
	ValidatorsTrainData []*ValidatorsTrainData `protobuf:"bytes,1,rep,name=validators_train_data,json=validatorsTrainData,proto3" json:"validators_train_data,omitempty"`
}

func (m *GetTrainDataResponse) Reset()         { *m = GetTrainDataResponse{} }
func (m *GetTrainDataResponse) String() string { return proto.CompactTextString(m) }
func (*GetTrainDataResponse) ProtoMessage()    {}
func (*GetTrainDataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_39004dcb8a770247, []int{0}
}
func (m *GetTrainDataResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetTrainDataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetTrainDataResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetTrainDataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTrainDataResponse.Merge(m, src)
}
func (m *GetTrainDataResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetTrainDataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTrainDataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetTrainDataResponse proto.InternalMessageInfo

func (m *GetTrainDataResponse) GetValidatorsTrainData() []*ValidatorsTrainData {
	if m != nil {
		return m.ValidatorsTrainData
	}
	return nil
}

type ValidatorsTrainData struct {
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Lr   string `protobuf:"bytes,2,opt,name=lr,proto3" json:"lr,omitempty"`
}

func (m *ValidatorsTrainData) Reset()         { *m = ValidatorsTrainData{} }
func (m *ValidatorsTrainData) String() string { return proto.CompactTextString(m) }
func (*ValidatorsTrainData) ProtoMessage()    {}
func (*ValidatorsTrainData) Descriptor() ([]byte, []int) {
	return fileDescriptor_39004dcb8a770247, []int{1}
}
func (m *ValidatorsTrainData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ValidatorsTrainData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ValidatorsTrainData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ValidatorsTrainData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValidatorsTrainData.Merge(m, src)
}
func (m *ValidatorsTrainData) XXX_Size() int {
	return m.Size()
}
func (m *ValidatorsTrainData) XXX_DiscardUnknown() {
	xxx_messageInfo_ValidatorsTrainData.DiscardUnknown(m)
}

var xxx_messageInfo_ValidatorsTrainData proto.InternalMessageInfo

func (m *ValidatorsTrainData) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ValidatorsTrainData) GetLr() string {
	if m != nil {
		return m.Lr
	}
	return ""
}

func init() {
	proto.RegisterType((*GetTrainDataResponse)(nil), "vesta.twin.GetTrainDataResponse")
	proto.RegisterType((*ValidatorsTrainData)(nil), "vesta.twin.ValidatorsTrainData")
}

func init() { proto.RegisterFile("vesta/twin/train_data.proto", fileDescriptor_39004dcb8a770247) }

var fileDescriptor_39004dcb8a770247 = []byte{
	// 200 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x2e, 0x4b, 0x2d, 0x2e,
	0x49, 0xd4, 0x2f, 0x29, 0xcf, 0xcc, 0xd3, 0x2f, 0x29, 0x4a, 0xcc, 0xcc, 0x8b, 0x4f, 0x49, 0x2c,
	0x49, 0xd4, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x02, 0x4b, 0xea, 0x81, 0x24, 0x95, 0xb2,
	0xb9, 0x44, 0xdc, 0x53, 0x4b, 0x42, 0x40, 0x4a, 0x5c, 0x12, 0x4b, 0x12, 0x83, 0x52, 0x8b, 0x0b,
	0xf2, 0xf3, 0x8a, 0x53, 0x85, 0x82, 0xb9, 0x44, 0xcb, 0x12, 0x73, 0x32, 0x53, 0x12, 0x4b, 0xf2,
	0x8b, 0x8a, 0xe3, 0x11, 0x46, 0x48, 0x30, 0x2a, 0x30, 0x6b, 0x70, 0x1b, 0xc9, 0xeb, 0x21, 0xcc,
	0xd0, 0x0b, 0x83, 0x2b, 0x44, 0x98, 0x23, 0x5c, 0x86, 0x29, 0xa8, 0x64, 0xc9, 0x25, 0x8c, 0x45,
	0xad, 0x90, 0x10, 0x17, 0x4b, 0x5e, 0x62, 0x6e, 0xaa, 0x04, 0xa3, 0x02, 0xa3, 0x06, 0x67, 0x10,
	0x98, 0x2d, 0xc4, 0xc7, 0xc5, 0x94, 0x53, 0x24, 0xc1, 0x04, 0x16, 0x61, 0xca, 0x29, 0x72, 0xd2,
	0x39, 0xf1, 0x48, 0x8e, 0xf1, 0xc2, 0x23, 0x39, 0xc6, 0x07, 0x8f, 0xe4, 0x18, 0x27, 0x3c, 0x96,
	0x63, 0xb8, 0xf0, 0x58, 0x8e, 0xe1, 0xc6, 0x63, 0x39, 0x86, 0x28, 0x21, 0x88, 0x57, 0x2b, 0xa0,
	0x9e, 0xad, 0x2c, 0x48, 0x2d, 0x4e, 0x62, 0x03, 0x7b, 0xd4, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff,
	0xf6, 0x2b, 0x4f, 0x0c, 0x07, 0x01, 0x00, 0x00,
}

func (m *GetTrainDataResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTrainDataResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetTrainDataResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ValidatorsTrainData) > 0 {
		for iNdEx := len(m.ValidatorsTrainData) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ValidatorsTrainData[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTrainData(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ValidatorsTrainData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValidatorsTrainData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ValidatorsTrainData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Lr) > 0 {
		i -= len(m.Lr)
		copy(dAtA[i:], m.Lr)
		i = encodeVarintTrainData(dAtA, i, uint64(len(m.Lr)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTrainData(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTrainData(dAtA []byte, offset int, v uint64) int {
	offset -= sovTrainData(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GetTrainDataResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ValidatorsTrainData) > 0 {
		for _, e := range m.ValidatorsTrainData {
			l = e.Size()
			n += 1 + l + sovTrainData(uint64(l))
		}
	}
	return n
}

func (m *ValidatorsTrainData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTrainData(uint64(l))
	}
	l = len(m.Lr)
	if l > 0 {
		n += 1 + l + sovTrainData(uint64(l))
	}
	return n
}

func sovTrainData(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTrainData(x uint64) (n int) {
	return sovTrainData(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GetTrainDataResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTrainData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTrainDataResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTrainDataResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorsTrainData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrainData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTrainData
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTrainData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorsTrainData = append(m.ValidatorsTrainData, &ValidatorsTrainData{})
			if err := m.ValidatorsTrainData[len(m.ValidatorsTrainData)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTrainData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTrainData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ValidatorsTrainData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTrainData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValidatorsTrainData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValidatorsTrainData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrainData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTrainData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTrainData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrainData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTrainData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTrainData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Lr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTrainData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTrainData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTrainData(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTrainData
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTrainData
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTrainData
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTrainData
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTrainData
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTrainData
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTrainData        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTrainData          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTrainData = fmt.Errorf("proto: unexpected end of group")
)
